import React from 'react';
import { Document, Page, Text, View, StyleSheet, PDFDownloadLink, Font } from '@react-pdf/renderer';

// Register a standard web-safe font
Font.register({
  family: 'Roboto',
  src: 'https://cdnjs.cloudflare.com/ajax/libs/ink/3.1.10/fonts/Roboto/roboto-light-webfont.ttf',
  fontWeight: 'normal'
});

Font.register({
  family: 'Roboto',
  src: 'https://cdnjs.cloudflare.com/ajax/libs/ink/3.1.10/fonts/Roboto/roboto-medium-webfont.ttf',
  fontWeight: 'bold'
});

const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    padding: 40,
    fontFamily: 'Roboto',
  },
  section: {
    margin: 10,
    padding: 10,
  },
  header: {
    fontSize: 24,
    marginBottom: 20,
    color: '#6366F1',
    fontWeight: 'bold',
  },
  subheader: {
    fontSize: 18,
    marginBottom: 15,
    color: '#4B5563',
    fontWeight: 'bold',
  },
  heading: {
    fontSize: 16,
    marginTop: 15,
    marginBottom: 10,
    color: '#6366F1',
    fontWeight: 'bold',
  },
  bold: {
    fontSize: 12,
    marginBottom: 8,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  italic: {
    fontSize: 12,
    marginBottom: 8,
    fontStyle: 'italic',
    color: '#4B5563',
  },
  text: {
    fontSize: 12,
    marginBottom: 8,
    color: '#374151',
    lineHeight: 1.6,
  },
  list: {
    marginLeft: 15,
    marginBottom: 8,
  },
  listItem: {
    fontSize: 12,
    marginBottom: 5,
    color: '#374151',
    flexDirection: 'row',
  },
  bullet: {
    width: 10,
    fontSize: 12,
    color: '#6366F1',
  },
  listText: {
    flex: 1,
    paddingLeft: 5,
  },
  metadata: {
    fontSize: 10,
    color: '#6B7280',
    marginTop: 20,
    textAlign: 'right',
  },
});

interface FormattedSection {
  type: 'heading' | 'bold' | 'italic' | 'list' | 'paragraph';
  content: string | string[];
}

const formatContent = (text: string): FormattedSection[] => {
  const cleanText = text.replace(/<[^>]*>/g, '');
  
  return cleanText.split('\n\n').map(section => {
    if (section.startsWith('#')) {
      return {
        type: 'heading',
        content: section.replace(/^#+ /, '').toUpperCase()
      };
    }
    if (section.includes('**')) {
      return {
        type: 'bold',
        content: section.replace(/\*\*/g, '')
      };
    }
    if (section.includes('_')) {
      return {
        type: 'italic',
        content: section.replace(/_/g, '')
      };
    }
    if (section.includes('- ')) {
      return {
        type: 'list',
        content: section.split('\n')
          .filter(line => line.trim() !== '')
          .map(line => line.replace(/^- /, '').trim())
      };
    }
    return {
      type: 'paragraph',
      content: section.trim()
    };
  });
};

interface GuideDocumentProps {
  niche: string;
  problem: string;
  solution: string;
}

const GuideDocument: React.FC<GuideDocumentProps> = ({ niche, problem, solution }) => {
  const formattedSections = formatContent(solution);

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.section}>
          <Text style={styles.header}>NicheVault Implementation Guide</Text>
          <Text style={styles.subheader}>Niche: {niche}</Text>
          <Text style={styles.subheader}>Problem: {problem}</Text>
          
          {formattedSections.map((section, index) => {
            switch (section.type) {
              case 'heading':
                return (
                  <Text key={index} style={styles.heading}>
                    {section.content}
                  </Text>
                );
              case 'bold':
                return (
                  <Text key={index} style={styles.bold}>
                    {section.content}
                  </Text>
                );
              case 'italic':
                return (
                  <Text key={index} style={styles.italic}>
                    {section.content}
                  </Text>
                );
              case 'list':
                return (
                  <View key={index} style={styles.list}>
                    {(section.content as string[]).map((item, i) => (
                      <View key={i} style={styles.listItem}>
                        <Text style={styles.bullet}>â€¢</Text>
                        <Text style={styles.listText}>{item}</Text>
                      </View>
                    ))}
                  </View>
                );
              default:
                return (
                  <Text key={index} style={styles.text}>
                    {section.content}
                  </Text>
                );
            }
          })}
          
          <Text style={styles.metadata}>
            Generated by NicheVault on {new Date().toLocaleDateString()}
          </Text>
        </View>
      </Page>
    </Document>
  );
};

export const generatePDFLink = (guide: GuideDocumentProps) => {
  return (
    <PDFDownloadLink
      document={<GuideDocument {...guide} />}
      fileName={`${guide.niche.replace(/[^a-zA-Z0-9]/g, '-')}-guide.pdf`.toLowerCase()}
      className="text-purple-400 hover:text-purple-300 transition-colors"
    >
      {({ loading }) => (loading ? 'Generating PDF...' : 'Download PDF')}
    </PDFDownloadLink>
  );
};

export default GuideDocument; 